def main():
    N = int(input())
    *A, = map(int, input().split())

    ans = f(N, A)
    print(ans)


try:
    # 最大公約数: greatest common divisor
    # py3.5+
    from math import gcd
except ImportError:
    from fractions import gcd


def f(N, A):
    """
    はじめ、モンスター iの体力は Ai
    以降、体力が1以上のモンスターを生きているモンスターと呼びます。
    生きているモンスターが 1体になるまで以下を繰り返します。

    ランダムに 1体の生きているモンスターがランダムに別の生きているモンスターに攻撃します。
    その結果、攻撃されたモンスターの体力を攻撃したモンスターの体力と同じ値だけ減らします。

    最後に生き残ったモンスターの最終的な体力の最小値を求めてください。

    成約
        入力は全て整数である。
        2 ≤ N  ≤ 10^5
        1 ≤ Ai ≤ 10^9

    どれだけ体力を減らせるか
    1のモンスターがいたら1
    一番少ない体力のモンスターが最低限の体力
    その体力で他のモンスターを攻撃し続けると Amax % Amin が最小になる
        ただし0になったらだめ
    多いモンスターは他に攻撃してもらう

    なんとなく最小公倍数・最大公約数が浮かんだ
    他のモンスターの体力で割り切れてしまうなら
        約数なら、他のモンスターが最小
        6と3
        6と4なら2残る
        9と2なら1残る
    """
    ans = A[0]
    for a in A[1:]:
        ans = gcd(ans, a)

    return ans


if __name__ == '__main__':
    main()
